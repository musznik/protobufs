syntax = "proto3";

package meshtastic;

option csharp_namespace = "Meshtastic.Protobufs";
option go_package = "github.com/meshtastic/go/generated";
option java_outer_classname = "NodeModAdminProtos";
option java_package = "com.geeksville.mesh";
option swift_prefix = "";


message NodeModAdmin {
  /*
   * sniffer enabled
   */
  bool sniffer_enabled = 1;
  /*
   * do not send prv over mqtt
   */
  bool do_not_send_prv_over_mqtt = 2;
  /*
   * local stats over mesh enabled
   */
  bool local_stats_over_mesh_enabled = 3;
  /*
   * local stats extended over mesh enabled
   */
  bool local_stats_extended_over_mesh_enabled = 4;

  /*
   * idlegame enabled
   */
  bool idlegame_enabled = 5;

  /*
   * base ch util + additional chan utilization defined by user
   */
  uint32 additional_chutil = 6;

  /*
   * base tx util + additional tx chan utilization defined by user
   */
  float additional_txutil = 7;

  /*
   * additional chutil polite percent defined by user
   */
  uint32 additional_polite_channel_percent = 8;

  /*
   * additional chutil polite percent defined by user
   */
  uint32 additional_polite_duty_cycle_percent = 9;

  /*
   * current tx util limit
   */
  float current_tx_util_limit = 10;

  /*
   * current nmax channel util percent
   */
  uint32 current_max_channel_util_percent = 11;

  /*
   * current polite channel util percent
   */
  uint32 current_polite_channel_util_percent = 12;

  /*
   * current polite duty cycle percent
   */
  uint32 current_polite_duty_cycle_percent = 13;

  /*
   * auto responder
   */
  bool auto_responder_enabled = 14;

  /*
   * auto responder text
   */
  string auto_responder_text = 15;

    /*
   * auto responder
   */
  bool auto_redirect_messages = 16;

  /*
   * auto responder text
   */
  uint32 auto_redirect_target_node_id = 17;

    /*
   * telemetry limiter enabled
   */
  bool telemetry_limiter_enabled = 18;

  /*
  * telemetry limiter, limit telemetry per minute
  */
  uint32 telemetry_limiter_packets_per_minute = 19;

   /*
   * telemetry limiter, auto chanUtil limiter
   */
  bool telemetry_limiter_auto_chanutil_enabled = 20;

  /*
  * telemetry limiter, limit telemetry per minute
  */
  uint32 telemetry_limiter_auto_chanutil_threshold = 21;

  /*
   * position limiter, enabled
   */
  bool position_limiter_enabled = 22;

  /*
  * position limiter, time threshold
  */
  uint32 position_limiter_time_minutes_threshold = 23;

  bool opportunistic_flooding_enabled = 24;
  uint32 base_delay_ms = 25;
  uint32 hop_delay_ms = 26;
  uint32 snr_gain_ms = 27;
  uint32 jitter_ms = 28;
  bool cancel_on_first_hear = 29;
}